[{"name": "app.py", "content": "from shiny import reactive, render\nfrom shiny.express import ui, input\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport os\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\nfrom suntime import Sun, SunTimeException\n\n\n\nUPDATE_INTERVAL_SECS: int = 3\n\n# --------------------------------------------\n# Initialize a REACTIVE VALUE with a common data structure\n# The reactive value is used to store state (information)\n# Used by all the display components that show this live data.\n# This reactive value is a wrapper around a DEQUE of readings\n# --------------------------------------------\n\nDEQUE_SIZE: int = 50\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# Load the historical data from data folder\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nhistorical_data_path = os.path.join(current_dir, \"PalmerStation_Monthly_Weather_Clean.csv\")\nhistorical_df = pd.read_csv(historical_data_path)\nhistorical_df['Date'] = pd.to_datetime(historical_df['Date'])\n\n# Collect the Live Data\n# Currently commented out as I was unable to get this to work with Shiny Live\n# Set update interval for live weather data\n#WEATHER_UPDATE_INTERVAL_SECS: int = 900  # 15 minutes in seconds\n\n#@reactive.effect\n#def update_weather():\n    # Invalidate this effect every WEATHER_UPDATE_INTERVAL_SECS\n    #reactive.invalidate_later(WEATHER_UPDATE_INTERVAL_SECS)\n\n# Setup the Open-Meteo API client with cache and retry on error\n#cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)\n#retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)\n#openmeteo = openmeteo_requests.Client(session = retry_session)\n\n# Make sure all required weather variables are listed here\n# The order of variables in hourly or daily is important to assign them correctly below\n#url = \"https://api.open-meteo.com/v1/forecast\"\n#params = {\n #   \"latitude\": -77.846,\n#    \"longitude\": 166.676,\n#    \"minutely_15\": \"temperature_2m\",\n#    \"current\": \"temperature_2m\",\n#    \"timezone\": \"GMT\",\n#    \"past_minutely_15\": 24,\n#    \"forecast_days\": 1\n#}\n#responses = openmeteo.weather_api(url, params=params)\n\n# Process first location. Add a for-loop for multiple locations or weather models\n#response = responses[0]\n\n\n# Current values. The order of variables needs to be the same as requested.\n#current = response.Current()\n#current_temperature_2m = current.Variables(0).Value()\n\n# Process minutely_15 data. The order of variables needs to be the same as requested.\n#minutely_15 = response.Minutely15()\n#minutely_15_temperature_2m = minutely_15.Variables(0).ValuesAsNumpy()\n\n#minutely_15_data = {\"date\": pd.date_range(\n#\tstart = pd.to_datetime(minutely_15.Time(), unit = \"s\", utc = True),\n#\tend = pd.to_datetime(minutely_15.TimeEnd(), unit = \"s\", utc = True),\n#\tfreq = pd.Timedelta(seconds = minutely_15.Interval()),\n#\tinclusive = \"left\"\n#)}\n#minutely_15_data[\"temperature_2m\"] = minutely_15_temperature_2m\n\n#minutely_15_dataframe = pd.DataFrame(data = minutely_15_data)\n\n\n# Define the reactive calculation\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic\n    temp = round(random.uniform(-18, 1), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\":temp, \"timestamp\":timestamp}\n\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # For Display: Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n\n    # For Display: Get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry\n\n    # Return a tuple with everything we need\n    # Every time we call this function, we'll get all these values\n    return deque_snapshot, df, latest_dictionary_entry\n\n@reactive.calc()\ndef filtered_historical_df():\n    # Get the selected time interval from the input\n    selected_interval = input.time()\n    # Parse the current date to get year and month\n    current_date = datetime.now()\n    current_year = current_date.year\n    current_month = current_date.month\n\n    # Filter the historical_df based on the selected interval\n    if selected_interval == \"1 Year\":\n        filtered_df = historical_df[\n            ((historical_df[\"Year\"] == current_year - 1) & (historical_df[\"Month\"] >= current_month)) |\n            (historical_df[\"Year\"] == current_year)\n        ]\n    elif selected_interval == \"5 years\":\n        filtered_df = historical_df[historical_df[\"Year\"] >= current_year - 5]\n    elif selected_interval == \"25 Years\":\n        filtered_df = historical_df[historical_df[\"Year\"] >= current_year - 25]\n    elif selected_interval == \"50 Years\":\n        filtered_df = historical_df[historical_df[\"Year\"] >= current_year - 50]\n    else:\n        filtered_df = historical_df\n\n    return filtered_df\n\n\n\n\n# Define the Shiny UI Page layout\n# Call the ui.page_opts() function\n# Set title to a string in quotes that will appear at the top\n# Set fillable to True to use the whole page width for the UI\nui.page_opts(title=\"Palmer Station Antarctica Temperatures\", fillable=True)\n\n# Sidebar is typically used for user interaction/information\n# Note the with statement to create the sidebar followed by a colon\n# Everything in the sidebar is indented consistently\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\"),\n    ui.p(\"A demonstration of real-time temperature readings in Antarctica.\", class_=\"text-center\",),\n#    ui.input_select(\"source\", \"Live Data Source\", [\"OpenMeteo API\", \"Random\"], selected=\"OpenMeteo API\"),\n    ui.input_select(\"data\", \"Data Table Source\", [\"Random\", \"Historical Data\"], selected=\"OpenMeteo API\"),\n    ui.input_select(\"time\", \"Historical Time Interval\", [\"1 Year\", \"5 years\", \"25 Years\", \"50 Years\"], selected=\"25 Years\"),\n    ui.hr(),\n    ui.h6(\"Links:\"),\n    ui.a(\"GitHub Source\", href=\"https://github.com/drpafowler/cintel-05-cintel/tree/main\", target=\"_blank\",),\n    ui.a(\"GitHub App\", href=\"https://drpafowler.github.io/cintel-05-cintel/\", target=\"_blank\")\n    ui.a(\"Palmer Station Webcam\", href=\"https://www.usap.gov/videoclipsandmaps/palwebcam.cfm\", target=\"_blank\")\n    ui.a(\"Palmer Station Historical Data\", href=\"https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-pal&identifier=189\", target=\"_blank\",)\n\n# In Shiny Express, everything not in the sidebar is in the main panel\n\nwith ui.layout_columns():\n    with ui.value_box(showcase=icon_svg(\"temperature-low\"), theme=\"bg-gradient-blue-purple\"):\n\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['temp']} C\"\n\n        @render.text\n        def display_temp_status():\n            \"\"\"Get the latest reading and return a status string\"\"\"\n\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            temp = latest_dictionary_entry['temp']\n            \n            if temp > 0:\n                return \"Warmer than Usual\"\n            elif temp > -15:\n                return \"Typical temperature\"\n            else:\n                return \"Colder than Usual\"\n\n  \n\n    with ui.value_box(showcase=icon_svg(\"clock\"), theme=\"bg-gradient-blue-purple\"):\n\n        \"Current Date and Time at Palmer Station\"\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string in Palmer Station time (UTC-3)\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            # Convert the timestamp string to datetime\n            utc_time = datetime.strptime(latest_dictionary_entry['timestamp'], \"%Y-%m-%d %H:%M:%S\")\n            # Adjust for Palmer Station timezone (UTC-3)\n            palmer_time = utc_time.replace(hour=(utc_time.hour - 3) % 24)\n            return palmer_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    with ui.value_box(showcase=icon_svg(\"sun\"), theme=\"bg-gradient-blue-purple\"):\n        \"Sunrise Time at Palmer Station\"\n\n        @render.text\n        def display_sunrise():\n            \"\"\"Calculate and return the sunrise time for Palmer Station, Antarctica\"\"\"\n            sun = Sun(-64.77, -64.05)\n            sunrise_time = sun.get_local_sunrise_time()\n            # Adjust for Palmer Station timezone (UTC-3)\n            palmer_sunrise_time = sunrise_time.replace(hour=(sunrise_time.hour - 3) % 24)\n            return palmer_sunrise_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    with ui.value_box(showcase=icon_svg(\"moon\"), theme=\"bg-gradient-blue-purple\"):\n        \"Sunset Time at Palmer Station\"        \n        @render.text\n        def display_sunset():\n            \"\"\"Calculate and return the sunset time for Palmer Station, Antarctica\"\"\"\n            sun = Sun(-64.77, -64.05)\n            sunset_time = sun.get_local_sunset_time()\n            # Adjust for Palmer Station timezone (UTC-3)\n            palmer_sunset_time = sunset_time.replace(hour=(sunset_time.hour - 3) % 24)\n            return palmer_sunset_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Data Table\")\n\n    @render.data_frame\n    def display_df():\n        \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n        if input.data() == \"Random\":\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            pd.set_option('display.width', None)\n            return render.DataGrid(df, width=\"100%\")\n        else:  # Historical Data\n            filtered_df = filtered_historical_df()[[\"Year\", \"Month\", \"Mean Temperature (C)\"]]\n            return render.DataGrid(filtered_df, width=\"100%\")\n\n\n\nwith ui.card():\n    ui.card_header(\"Live Data\")\n\n    @render_plotly\n    def display_plot():\n\n            # Fetch from the reactive calc function for random data\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n            # Ensure the DataFrame is not empty before plotting\n            if not df.empty:\n                # Convert the 'timestamp' column to datetime for better plotting\n                df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n                # Create scatter plot for readings\n                fig = px.scatter(df,\n                    x=\"timestamp\",\n                    y=\"temp\",\n                    title=\"Temperature Readings with Regression Line\",\n                    labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n                    color_discrete_sequence=[\"blue\"])\n                \n                # Linear regression\n                sequence = range(len(df))\n                x_vals = list(sequence)\n                y_vals = df[\"temp\"]\n\n                slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n                df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n                # Add the regression line to the figure\n                fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line')\n\n                # Update layout\n                fig.update_layout(xaxis_title=\"Time\", yaxis_title=\"Temperature (\u00b0C)\")\n                return fig\n\n            return px.scatter()  # Return empty plot if df is empty\n\nwith ui.card():\n    ui.card_header(\"Historical Data\")   \n\n    @render_plotly\n    def display_historical_plot():\n        # Fetch the filtered historical data\n        filtered_df = filtered_historical_df()\n        fig = px.scatter(filtered_df,\n            x=\"Date\",\n            y=\"Mean Temperature (C)\",\n            title=\"Historical Temperature Readings\",\n            labels={\"Temperature\": \"Temperature (\u00b0C)\", \"Date\": \"Time\"},\n            color_discrete_sequence=[\"blue\"] )\n\n        # Calculate and add a 12-month running average (since we have monthly data)\n        filtered_df['Running_Avg'] = filtered_df['Mean Temperature (C)'].rolling(window=12, center=True).mean()\n\n        # Add the running average as a red line\n        fig.add_scatter(\n            x=filtered_df[\"Date\"], \n            y=filtered_df[\"Running_Avg\"], \n            mode='lines', \n            line=dict(color='red', width=2), \n            name='12-Month Running Average'\n        )\n\n        return fig\n    \n\n\n", "type": "text"}, {"name": "PalmerStation_Monthly_Weather_Clean.csv", "content": "Date,Year,Month,Mean Temperature (C)\n1974-01-01,1974,1,\n1974-02-01,1974,2,\n1974-03-01,1974,3,\n1974-04-01,1974,4,\n1974-05-01,1974,5,-3.5\n1974-06-01,1974,6,-3.2\n1974-07-01,1974,7,-5.8\n1974-08-01,1974,8,-5.8\n1974-09-01,1974,9,-6.5\n1974-10-01,1974,10,-1.7\n1974-11-01,1974,11,0.0\n1974-12-01,1974,12,1.1\n1975-01-01,1975,1,3.0\n1975-02-01,1975,2,2.0\n1975-03-01,1975,3,1.0\n1975-04-01,1975,4,1.0\n1975-05-01,1975,5,-3.0\n1975-06-01,1975,6,-6.0\n1975-07-01,1975,7,-7.0\n1975-08-01,1975,8,-8.0\n1975-09-01,1975,9,-4.0\n1975-10-01,1975,10,-1.0\n1975-11-01,1975,11,-2.0\n1975-12-01,1975,12,0.0\n1976-01-01,1976,1,1.0\n1976-02-01,1976,2,2.0\n1976-03-01,1976,3,0.0\n1976-04-01,1976,4,-1.0\n1976-05-01,1976,5,-5.0\n1976-06-01,1976,6,-9.0\n1976-07-01,1976,7,-12.0\n1976-08-01,1976,8,-16.0\n1976-09-01,1976,9,-9.0\n1976-10-01,1976,10,-4.0\n1976-11-01,1976,11,0.0\n1976-12-01,1976,12,1.0\n1977-01-01,1977,1,2.0\n1977-02-01,1977,2,1.0\n1977-03-01,1977,3,1.0\n1977-04-01,1977,4,-1.0\n1977-05-01,1977,5,-5.0\n1977-06-01,1977,6,-7.0\n1977-07-01,1977,7,-14.0\n1977-08-01,1977,8,\n1977-09-01,1977,9,-11.4\n1977-10-01,1977,10,-8.9\n1977-11-01,1977,11,-2.2\n1977-12-01,1977,12,0.0\n1978-01-01,1978,1,1.0\n1978-02-01,1978,2,0.7\n1978-03-01,1978,3,-0.6\n1978-04-01,1978,4,-3.0\n1978-05-01,1978,5,-2.5\n1978-06-01,1978,6,-4.9\n1978-07-01,1978,7,-14.9\n1978-08-01,1978,8,-11.9\n1978-09-01,1978,9,-5.8\n1978-10-01,1978,10,-4.0\n1978-11-01,1978,11,-1.9\n1978-12-01,1978,12,1.0\n1979-01-01,1979,1,2.0\n1979-02-01,1979,2,2.0\n1979-03-01,1979,3,1.0\n1979-04-01,1979,4,-1.0\n1979-05-01,1979,5,-5.0\n1979-06-01,1979,6,-6.0\n1979-07-01,1979,7,-7.0\n1979-08-01,1979,8,-7.0\n1979-09-01,1979,9,-5.0\n1979-10-01,1979,10,-4.0\n1979-11-01,1979,11,0.0\n1979-12-01,1979,12,1.7\n1980-01-01,1980,1,1.9\n1980-02-01,1980,2,2.2\n1980-03-01,1980,3,-1.5\n1980-04-01,1980,4,-4.7\n1980-05-01,1980,5,-3.7\n1980-06-01,1980,6,-9.3\n1980-07-01,1980,7,-12.6\n1980-08-01,1980,8,-13.7\n1980-09-01,1980,9,-7.2\n1980-10-01,1980,10,-4.0\n1980-11-01,1980,11,-2.0\n1980-12-01,1980,12,0.5\n1981-01-01,1981,1,1.6\n1981-02-01,1981,2,1.1\n1981-03-01,1981,3,0.0\n1981-04-01,1981,4,-1.8\n1981-05-01,1981,5,-5.2\n1981-06-01,1981,6,-6.3\n1981-07-01,1981,7,-6.8\n1981-08-01,1981,8,-8.8\n1981-09-01,1981,9,-8.3\n1981-10-01,1981,10,-5.3\n1981-11-01,1981,11,-2.4\n1981-12-01,1981,12,-0.8\n1982-01-01,1982,1,-0.2\n1982-02-01,1982,2,\n1982-03-01,1982,3,\n1982-04-01,1982,4,\n1982-05-01,1982,5,-0.5\n1982-06-01,1982,6,-0.8\n1982-07-01,1982,7,\n1982-08-01,1982,8,-7.9\n1982-09-01,1982,9,-7.9\n1982-10-01,1982,10,-5.5\n1982-11-01,1982,11,-2.0\n1982-12-01,1982,12,2.1\n1983-01-01,1983,1,2.8\n1983-02-01,1983,2,1.2\n1983-03-01,1983,3,0.0\n1983-04-01,1983,4,-1.2\n1983-05-01,1983,5,-2.1\n1983-06-01,1983,6,-3.0\n1983-07-01,1983,7,-2.9\n1983-08-01,1983,8,-4.3\n1983-09-01,1983,9,-4.1\n1983-10-01,1983,10,-2.8\n1983-11-01,1983,11,0.3\n1983-12-01,1983,12,1.8\n1984-01-01,1984,1,2.9\n1984-02-01,1984,2,2.8\n1984-03-01,1984,3,1.4\n1984-04-01,1984,4,-1.7\n1984-05-01,1984,5,-3.3\n1984-06-01,1984,6,-6.7\n1984-07-01,1984,7,-7.4\n1984-08-01,1984,8,-6.7\n1984-09-01,1984,9,-3.4\n1984-10-01,1984,10,-3.3\n1984-11-01,1984,11,0.9\n1984-12-01,1984,12,3.7\n1985-01-01,1985,1,4.2\n1985-02-01,1985,2,3.7\n1985-03-01,1985,3,0.9\n1985-04-01,1985,4,0.0\n1985-05-01,1985,5,-4.3\n1985-06-01,1985,6,-3.7\n1985-07-01,1985,7,-5.9\n1985-08-01,1985,8,-5.9\n1985-09-01,1985,9,-1.4\n1985-10-01,1985,10,-0.7\n1985-11-01,1985,11,2.5\n1985-12-01,1985,12,3.7\n1986-01-01,1986,1,5.2\n1986-02-01,1986,2,3.9\n1986-03-01,1986,3,3.3\n1986-04-01,1986,4,-0.4\n1986-05-01,1986,5,-4.7\n1986-06-01,1986,6,-4.5\n1986-07-01,1986,7,-6.9\n1986-08-01,1986,8,-9.1\n1986-09-01,1986,9,-9.0\n1986-10-01,1986,10,-2.8\n1986-11-01,1986,11,\n1986-12-01,1986,12,\n1987-01-01,1987,1,\n1987-02-01,1987,2,1.9\n1987-03-01,1987,3,\n1987-04-01,1987,4,-1.9\n1987-05-01,1987,5,-2.8\n1987-06-01,1987,6,-7.1\n1987-07-01,1987,7,\n1987-08-01,1987,8,-7.8\n1987-09-01,1987,9,-9.9\n1987-10-01,1987,10,-1.4\n1987-11-01,1987,11,0.8\n1987-12-01,1987,12,1.8\n1988-01-01,1988,1,2.3\n1988-02-01,1988,2,2.7\n1988-03-01,1988,3,1.2\n1988-04-01,1988,4,-0.1\n1988-05-01,1988,5,-1.3\n1988-06-01,1988,6,-2.9\n1988-07-01,1988,7,-3.0\n1988-08-01,1988,8,-6.8\n1988-09-01,1988,9,-2.2\n1988-10-01,1988,10,0.0\n1988-11-01,1988,11,\n1988-12-01,1988,12,\n1989-01-01,1989,1,\n1989-02-01,1989,2,4.1\n1989-03-01,1989,3,\n1989-04-01,1989,4,-1.88\n1989-05-01,1989,5,-1.04\n1989-06-01,1989,6,-2.36\n1989-07-01,1989,7,-1.65\n1989-08-01,1989,8,-2.39\n1989-09-01,1989,9,-2.4\n1989-10-01,1989,10,-0.4\n1989-11-01,1989,11,1.1\n1989-12-01,1989,12,2.61\n1990-01-01,1990,1,3.64\n1990-02-01,1990,2,3.62\n1990-03-01,1990,3,1.87\n1990-04-01,1990,4,-2.5\n1990-05-01,1990,5,-3.01\n1990-06-01,1990,6,-3.41\n1990-07-01,1990,7,-2.91\n1990-08-01,1990,8,-6.31\n1990-09-01,1990,9,-4.66\n1990-10-01,1990,10,-2.24\n1990-11-01,1990,11,-1.4\n1990-12-01,1990,12,1.59\n1991-01-01,1991,1,3.09\n1991-02-01,1991,2,2.59\n1991-03-01,1991,3,0.85\n1991-04-01,1991,4,-1.09\n1991-05-01,1991,5,-5.12\n1991-06-01,1991,6,-7.4\n1991-07-01,1991,7,-6.13\n1991-08-01,1991,8,-6.52\n1991-09-01,1991,9,-4.24\n1991-10-01,1991,10,-5.22\n1991-11-01,1991,11,-0.46\n1991-12-01,1991,12,1.44\n1992-01-01,1992,1,2.58\n1992-02-01,1992,2,1.28\n1992-03-01,1992,3,-0.34\n1992-04-01,1992,4,-0.86\n1992-05-01,1992,5,-5.8\n1992-06-01,1992,6,-8.08\n1992-07-01,1992,7,-8.36\n1992-08-01,1992,8,-6.29\n1992-09-01,1992,9,-4.27\n1992-10-01,1992,10,-1.5\n1992-11-01,1992,11,0.12\n1992-12-01,1992,12,3.33\n1993-01-01,1993,1,3.18\n1993-02-01,1993,2,2.45\n1993-03-01,1993,3,-0.05\n1993-04-01,1993,4,-0.99\n1993-05-01,1993,5,-2.39\n1993-06-01,1993,6,-4.97\n1993-07-01,1993,7,-4.28\n1993-08-01,1993,8,-4.66\n1993-09-01,1993,9,-4.64\n1993-10-01,1993,10,-3.32\n1993-11-01,1993,11,0.79\n1993-12-01,1993,12,1.13\n1994-01-01,1994,1,2.15\n1994-02-01,1994,2,2.04\n1994-03-01,1994,3,0.83\n1994-04-01,1994,4,-0.8\n1994-05-01,1994,5,-3.19\n1994-06-01,1994,6,-4.58\n1994-07-01,1994,7,-10.99\n1994-08-01,1994,8,-6.61\n1994-09-01,1994,9,-6.15\n1994-10-01,1994,10,-6.65\n1994-11-01,1994,11,1.72\n1994-12-01,1994,12,1.81\n1995-01-01,1995,1,3.47\n1995-02-01,1995,2,2.39\n1995-03-01,1995,3,0.06\n1995-04-01,1995,4,-0.14\n1995-05-01,1995,5,-2.47\n1995-06-01,1995,6,-5.98\n1995-07-01,1995,7,-8.48\n1995-08-01,1995,8,-12.43\n1995-09-01,1995,9,-8.24\n1995-10-01,1995,10,-2.72\n1995-11-01,1995,11,-1.37\n1995-12-01,1995,12,1.07\n1996-01-01,1996,1,2.4\n1996-02-01,1996,2,2.12\n1996-03-01,1996,3,1.24\n1996-04-01,1996,4,-1.09\n1996-05-01,1996,5,-1.41\n1996-06-01,1996,6,-3.32\n1996-07-01,1996,7,-4.91\n1996-08-01,1996,8,-5.66\n1996-09-01,1996,9,-1.43\n1996-10-01,1996,10,-2.37\n1996-11-01,1996,11,-0.42\n1996-12-01,1996,12,1.63\n1997-01-01,1997,1,2.85\n1997-02-01,1997,2,1.74\n1997-03-01,1997,3,0.45\n1997-04-01,1997,4,-1.48\n1997-05-01,1997,5,-2.51\n1997-06-01,1997,6,-3.76\n1997-07-01,1997,7,-7.79\n1997-08-01,1997,8,-6.86\n1997-09-01,1997,9,-8.65\n1997-10-01,1997,10,-2.85\n1997-11-01,1997,11,-1.63\n1997-12-01,1997,12,1.53\n1998-01-01,1998,1,2.94\n1998-02-01,1998,2,2.07\n1998-03-01,1998,3,1.04\n1998-04-01,1998,4,0.49\n1998-05-01,1998,5,-2.77\n1998-06-01,1998,6,-1.03\n1998-07-01,1998,7,-3.56\n1998-08-01,1998,8,-4.86\n1998-09-01,1998,9,-5.49\n1998-10-01,1998,10,-1.59\n1998-11-01,1998,11,-0.08\n1998-12-01,1998,12,1.2\n1999-01-01,1999,1,2.44\n1999-02-01,1999,2,2.15\n1999-03-01,1999,3,1.56\n1999-04-01,1999,4,0.25\n1999-05-01,1999,5,-0.62\n1999-06-01,1999,6,-3.83\n1999-07-01,1999,7,-3.64\n1999-08-01,1999,8,-8.12\n1999-09-01,1999,9,-6.82\n1999-10-01,1999,10,-2.18\n1999-11-01,1999,11,-0.03\n1999-12-01,1999,12,1.06\n2000-01-01,2000,1,1.68\n2000-02-01,2000,2,1.81\n2000-03-01,2000,3,0.8\n2000-04-01,2000,4,-0.53\n2000-05-01,2000,5,-2.06\n2000-06-01,2000,6,-2.83\n2000-07-01,2000,7,-3.24\n2000-08-01,2000,8,-5.42\n2000-09-01,2000,9,-6.8\n2000-10-01,2000,10,-1.36\n2000-11-01,2000,11,-0.32\n2000-12-01,2000,12,1.89\n2001-01-01,2001,1,2.53\n2001-02-01,2001,2,2.65\n2001-03-01,2001,3,1.62\n2001-04-01,2001,4,-1.55\n2001-05-01,2001,5,-0.17\n2001-06-01,2001,6,-4.24\n2001-07-01,2001,7,-6.47\n2001-08-01,2001,8,-5.67\n2001-09-01,2001,9,-5.07\n2001-10-01,2001,10,-2.28\n2001-11-01,2001,11,-1.06\n2001-12-01,2001,12,0.91\n2002-01-01,2002,1,2.03\n2002-02-01,2002,2,1.63\n2002-03-01,2002,3,-0.29\n2002-04-01,2002,4,0.2\n2002-05-01,2002,5,-4.75\n2002-06-01,2002,6,-8.66\n2002-07-01,2002,7,-7.62\n2002-08-01,2002,8,-6.75\n2002-09-01,2002,9,-2.72\n2002-10-01,2002,10,-4.53\n2002-11-01,2002,11,-1.21\n2002-12-01,2002,12,1.55\n2003-01-01,2003,1,2.99\n2003-02-01,2003,2,2.29\n2003-03-01,2003,3,0.32\n2003-04-01,2003,4,-0.61\n2003-05-01,2003,5,-2.44\n2003-06-01,2003,6,-4.54\n2003-07-01,2003,7,-3.07\n2003-08-01,2003,8,-1.85\n2003-09-01,2003,9,-4.24\n2003-10-01,2003,10,-2.78\n2003-11-01,2003,11,-0.91\n2003-12-01,2003,12,0.72\n2004-01-01,2004,1,2.69\n2004-02-01,2004,2,2.01\n2004-03-01,2004,3,1.38\n2004-04-01,2004,4,-0.31\n2004-05-01,2004,5,-2.32\n2004-06-01,2004,6,-2.81\n2004-07-01,2004,7,-3.4\n2004-08-01,2004,8,-6.9\n2004-09-01,2004,9,-6.83\n2004-10-01,2004,10,-4.23\n2004-11-01,2004,11,0.01\n2004-12-01,2004,12,1.29\n2005-01-01,2005,1,1.55\n2005-02-01,2005,2,1.55\n2005-03-01,2005,3,0.49\n2005-04-01,2005,4,-1.05\n2005-05-01,2005,5,-2.76\n2005-06-01,2005,6,-5.73\n2005-07-01,2005,7,-5.73\n2005-08-01,2005,8,-6.08\n2005-09-01,2005,9,-2.68\n2005-10-01,2005,10,-1.42\n2005-11-01,2005,11,0.16\n2005-12-01,2005,12,0.44\n2006-01-01,2006,1,2.35\n2006-02-01,2006,2,2.85\n2006-03-01,2006,3,2.34\n2006-04-01,2006,4,-0.07\n2006-05-01,2006,5,-1.42\n2006-06-01,2006,6,-2.92\n2006-07-01,2006,7,-4.31\n2006-08-01,2006,8,-6.21\n2006-09-01,2006,9,-5.45\n2006-10-01,2006,10,-0.52\n2006-11-01,2006,11,-0.46\n2006-12-01,2006,12,2.31\n2007-01-01,2007,1,2.73\n2007-02-01,2007,2,1.96\n2007-03-01,2007,3,0.05\n2007-04-01,2007,4,-1.93\n2007-05-01,2007,5,-2.07\n2007-06-01,2007,6,-4.32\n2007-07-01,2007,7,-6.52\n2007-08-01,2007,8,-4.55\n2007-09-01,2007,9,-2.35\n2007-10-01,2007,10,-2.65\n2007-11-01,2007,11,-0.79\n2007-12-01,2007,12,1.17\n2008-01-01,2008,1,2.16\n2008-02-01,2008,2,2.22\n2008-03-01,2008,3,1.27\n2008-04-01,2008,4,-0.84\n2008-05-01,2008,5,-0.88\n2008-06-01,2008,6,-1.89\n2008-07-01,2008,7,-3.93\n2008-08-01,2008,8,-7.11\n2008-09-01,2008,9,-1.04\n2008-10-01,2008,10,-0.58\n2008-11-01,2008,11,0.59\n2008-12-01,2008,12,0.72\n2009-01-01,2009,1,\n2009-02-01,2009,2,2.3\n2009-03-01,2009,3,1.83\n2009-04-01,2009,4,-1.58\n2009-05-01,2009,5,-0.99\n2009-06-01,2009,6,-3.98\n2009-07-01,2009,7,-6.13\n2009-08-01,2009,8,-3.83\n2009-09-01,2009,9,-4.43\n2009-10-01,2009,10,-2.86\n2009-11-01,2009,11,-1.27\n2009-12-01,2009,12,1.54\n2010-01-01,2010,1,1.76\n2010-02-01,2010,2,1.79\n2010-03-01,2010,3,0.77\n2010-04-01,2010,4,-0.83\n2010-05-01,2010,5,-1.52\n2010-06-01,2010,6,-1.82\n2010-07-01,2010,7,-4.44\n2010-08-01,2010,8,-3.9\n2010-09-01,2010,9,-2.34\n2010-10-01,2010,10,-0.19\n2010-11-01,2010,11,0.85\n2010-12-01,2010,12,1.43\n2011-01-01,2011,1,2.12\n2011-02-01,2011,2,2.43\n2011-03-01,2011,3,0.13\n2011-04-01,2011,4,-1.9\n2011-05-01,2011,5,-1.42\n2011-06-01,2011,6,-4.15\n2011-07-01,2011,7,-6.36\n2011-08-01,2011,8,-7.16\n2011-09-01,2011,9,-5.75\n2011-10-01,2011,10,-2.01\n2011-11-01,2011,11,0.16\n2011-12-01,2011,12,1.55\n2012-01-01,2012,1,1.14\n2012-02-01,2012,2,0.95\n2012-03-01,2012,3,1.35\n2012-04-01,2012,4,-0.84\n2012-05-01,2012,5,-0.47\n2012-06-01,2012,6,-5.01\n2012-07-01,2012,7,-3.42\n2012-08-01,2012,8,-3.29\n2012-09-01,2012,9,-3.13\n2012-10-01,2012,10,-4.0\n2012-11-01,2012,11,-1.36\n2012-12-01,2012,12,0.94\n2013-01-01,2013,1,2.28\n2013-02-01,2013,2,1.84\n2013-03-01,2013,3,1.44\n2013-04-01,2013,4,0.8\n2013-05-01,2013,5,-1.82\n2013-06-01,2013,6,-3.52\n2013-07-01,2013,7,-5.12\n2013-08-01,2013,8,-6.58\n2013-09-01,2013,9,-7.25\n2013-10-01,2013,10,-2.79\n2013-11-01,2013,11,-2.22\n2013-12-01,2013,12,-0.21\n2014-01-01,2014,1,1.33\n2014-02-01,2014,2,0.86\n2014-03-01,2014,3,0.06\n2014-04-01,2014,4,-0.26\n2014-05-01,2014,5,-0.87\n2014-06-01,2014,6,-2.88\n2014-07-01,2014,7,-3.95\n2014-08-01,2014,8,-5.55\n2014-09-01,2014,9,-3.57\n2014-10-01,2014,10,-3.0\n2014-11-01,2014,11,-1.27\n2014-12-01,2014,12,0.35\n2015-01-01,2015,1,1.71\n2015-02-01,2015,2,1.53\n2015-03-01,2015,3,0.5\n2015-04-01,2015,4,-0.4\n2015-05-01,2015,5,-2.67\n2015-06-01,2015,6,-6.21\n2015-07-01,2015,7,-10.72\n2015-08-01,2015,8,-9.12\n2015-09-01,2015,9,-9.66\n2015-10-01,2015,10,-2.81\n2015-11-01,2015,11,-1.54\n2015-12-01,2015,12,-0.12\n2016-01-01,2016,1,0.87\n2016-02-01,2016,2,1.17\n2016-03-01,2016,3,0.43\n2016-04-01,2016,4,-2.8\n2016-05-01,2016,5,-2.16\n2016-06-01,2016,6,-1.97\n2016-07-01,2016,7,-6.74\n2016-08-01,2016,8,-7.5\n2016-09-01,2016,9,-1.8\n2016-10-01,2016,10,-1.25\n2016-11-01,2016,11,-1.31\n2016-12-01,2016,12,0.89\n2017-01-01,2017,1,2.56\n2017-02-01,2017,2,2.67\n2017-03-01,2017,3,1.96\n2017-04-01,2017,4,-0.92\n2017-05-01,2017,5,-0.84\n2017-06-01,2017,6,-3.45\n2017-07-01,2017,7,-4.35\n2017-08-01,2017,8,-4.55\n2017-09-01,2017,9,-7.64\n2017-10-01,2017,10,-3.41\n2017-11-01,2017,11,-1.19\n2017-12-01,2017,12,1.19\n2018-01-01,2018,1,1.79\n2018-02-01,2018,2,2.6\n2018-03-01,2018,3,1.24\n2018-04-01,2018,4,0.04\n2018-05-01,2018,5,-2.78\n2018-06-01,2018,6,-3.24\n2018-07-01,2018,7,-4.89\n2018-08-01,2018,8,-6.26\n2018-09-01,2018,9,-5.6\n2018-10-01,2018,10,-2.64\n2018-11-01,2018,11,-0.29\n2018-12-01,2018,12,0.47\n2019-01-01,2019,1,1.21\n2019-02-01,2019,2,0.76\n2019-03-01,2019,3,0.84\n2019-04-01,2019,4,-0.37\n2019-05-01,2019,5,-2.96\n2019-06-01,2019,6,-3.26\n2019-07-01,2019,7,-4.22\n2019-08-01,2019,8,-4.79\n2019-09-01,2019,9,-5.66\n2019-10-01,2019,10,-2.92\n2019-11-01,2019,11,-1.0\n2019-12-01,2019,12,0.8\n2020-01-01,2020,1,3.03\n2020-02-01,2020,2,2.69\n2020-03-01,2020,3,0.92\n2020-04-01,2020,4,-0.37\n2020-05-01,2020,5,-2.01\n2020-06-01,2020,6,-2.43\n2020-07-01,2020,7,-4.84\n2020-08-01,2020,8,-4.64\n2020-09-01,2020,9,-4.54\n2020-10-01,2020,10,-2.36\n2020-11-01,2020,11,0.28\n2020-12-01,2020,12,0.64\n2021-01-01,2021,1,2.17\n2021-02-01,2021,2,2.11\n2021-03-01,2021,3,0.81\n2021-04-01,2021,4,-1.0\n2021-05-01,2021,5,-1.78\n2021-06-01,2021,6,-2.64\n2021-07-01,2021,7,-3.21\n2021-08-01,2021,8,-6.55\n2021-09-01,2021,9,-1.82\n2021-10-01,2021,10,-0.61\n2021-11-01,2021,11,0.37\n2021-12-01,2021,12,0.85\n2022-01-01,2022,1,1.99\n2022-02-01,2022,2,2.12\n2022-03-01,2022,3,0.77\n2022-04-01,2022,4,-0.49\n2022-05-01,2022,5,-0.72\n2022-06-01,2022,6,-2.22\n2022-07-01,2022,7,-2.58\n2022-08-01,2022,8,-1.18\n2022-09-01,2022,9,-0.6\n2022-10-01,2022,10,-1.62\n2022-11-01,2022,11,0.67\n2022-12-01,2022,12,1.56\n2023-01-01,2023,1,2.8\n2023-02-01,2023,2,2.3\n2023-03-01,2023,3,1.05\n2023-04-01,2023,4,-0.16\n2023-05-01,2023,5,-0.61\n2023-06-01,2023,6,-2.72\n2023-07-01,2023,7,-2.99\n2023-08-01,2023,8,-5.54\n2023-09-01,2023,9,-4.44\n2023-10-01,2023,10,-2.99\n2023-11-01,2023,11,-0.88\n2023-12-01,2023,12,0.56\n2024-01-01,2024,1,1.75\n2024-02-01,2024,2,1.75\n2024-03-01,2024,3,0.47\n2024-04-01,2024,4,-1.15\n", "type": "text"}, {"name": "cleandata.ipynb", "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let's clean up the data\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>Mean Temperature (C)</th>\\n\",\n       \"      <th>Temperature Count</th>\\n\",\n       \"      <th>Mean Pressure (mbar)</th>\\n\",\n       \"      <th>Pressure Count</th>\\n\",\n       \"      <th>Mean Precipitation (mm)</th>\\n\",\n       \"      <th>Sum Precipitation (mm)</th>\\n\",\n       \"      <th>Precipitation Count</th>\\n\",\n       \"      <th>Mean Sea Surface Temperature (C)</th>\\n\",\n       \"      <th>Sea Surface Temperature Count</th>\\n\",\n       \"      <th>Mean Windspeed (knots)</th>\\n\",\n       \"      <th>Windspeed Count</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1974-01-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1974-02-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>1974-03-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>1974-04-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>1974-05-01</td>\\n\",\n       \"      <td>-3.5</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"         Date  Mean Temperature (C)  Temperature Count  Mean Pressure (mbar)  \\\\\\n\",\n       \"0  1974-01-01                   NaN                NaN                   NaN   \\n\",\n       \"1  1974-02-01                   NaN                NaN                   NaN   \\n\",\n       \"2  1974-03-01                   NaN                NaN                   NaN   \\n\",\n       \"3  1974-04-01                   NaN                NaN                   NaN   \\n\",\n       \"4  1974-05-01                  -3.5                NaN                   NaN   \\n\",\n       \"\\n\",\n       \"   Pressure Count  Mean Precipitation (mm)  Sum Precipitation (mm)  \\\\\\n\",\n       \"0             NaN                      NaN                     NaN   \\n\",\n       \"1             NaN                      NaN                     NaN   \\n\",\n       \"2             NaN                      NaN                     NaN   \\n\",\n       \"3             NaN                      NaN                     NaN   \\n\",\n       \"4             NaN                      NaN                     NaN   \\n\",\n       \"\\n\",\n       \"   Precipitation Count  Mean Sea Surface Temperature (C)  \\\\\\n\",\n       \"0                  NaN                               NaN   \\n\",\n       \"1                  NaN                               NaN   \\n\",\n       \"2                  NaN                               NaN   \\n\",\n       \"3                  NaN                               NaN   \\n\",\n       \"4                  NaN                               NaN   \\n\",\n       \"\\n\",\n       \"   Sea Surface Temperature Count  Mean Windspeed (knots)  Windspeed Count  \\n\",\n       \"0                            NaN                     NaN              NaN  \\n\",\n       \"1                            NaN                     NaN              NaN  \\n\",\n       \"2                            NaN                     NaN              NaN  \\n\",\n       \"3                            NaN                     NaN              NaN  \\n\",\n       \"4                            NaN                     NaN              NaN  \"\n      ]\n     },\n     \"execution_count\": 1,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# import the pandas library and read the data from the csv file\\n\",\n    \"import pandas as pd\\n\",\n    \"df = pd.read_csv('data/PalmerStation_Monthly_Weather.csv')\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>Mean Temperature (C)</th>\\n\",\n       \"      <th>Temperature Count</th>\\n\",\n       \"      <th>Mean Pressure (mbar)</th>\\n\",\n       \"      <th>Pressure Count</th>\\n\",\n       \"      <th>Mean Precipitation (mm)</th>\\n\",\n       \"      <th>Sum Precipitation (mm)</th>\\n\",\n       \"      <th>Precipitation Count</th>\\n\",\n       \"      <th>Mean Sea Surface Temperature (C)</th>\\n\",\n       \"      <th>Sea Surface Temperature Count</th>\\n\",\n       \"      <th>Mean Windspeed (knots)</th>\\n\",\n       \"      <th>Windspeed Count</th>\\n\",\n       \"      <th>Year</th>\\n\",\n       \"      <th>Month</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1974-01-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1974-02-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>1974-03-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>1974-04-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>1974-05-01</td>\\n\",\n       \"      <td>-3.5</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"         Date  Mean Temperature (C)  Temperature Count  Mean Pressure (mbar)  \\\\\\n\",\n       \"0  1974-01-01                   NaN                NaN                   NaN   \\n\",\n       \"1  1974-02-01                   NaN                NaN                   NaN   \\n\",\n       \"2  1974-03-01                   NaN                NaN                   NaN   \\n\",\n       \"3  1974-04-01                   NaN                NaN                   NaN   \\n\",\n       \"4  1974-05-01                  -3.5                NaN                   NaN   \\n\",\n       \"\\n\",\n       \"   Pressure Count  Mean Precipitation (mm)  Sum Precipitation (mm)  \\\\\\n\",\n       \"0             NaN                      NaN                     NaN   \\n\",\n       \"1             NaN                      NaN                     NaN   \\n\",\n       \"2             NaN                      NaN                     NaN   \\n\",\n       \"3             NaN                      NaN                     NaN   \\n\",\n       \"4             NaN                      NaN                     NaN   \\n\",\n       \"\\n\",\n       \"   Precipitation Count  Mean Sea Surface Temperature (C)  \\\\\\n\",\n       \"0                  NaN                               NaN   \\n\",\n       \"1                  NaN                               NaN   \\n\",\n       \"2                  NaN                               NaN   \\n\",\n       \"3                  NaN                               NaN   \\n\",\n       \"4                  NaN                               NaN   \\n\",\n       \"\\n\",\n       \"   Sea Surface Temperature Count  Mean Windspeed (knots)  Windspeed Count  \\\\\\n\",\n       \"0                            NaN                     NaN              NaN   \\n\",\n       \"1                            NaN                     NaN              NaN   \\n\",\n       \"2                            NaN                     NaN              NaN   \\n\",\n       \"3                            NaN                     NaN              NaN   \\n\",\n       \"4                            NaN                     NaN              NaN   \\n\",\n       \"\\n\",\n       \"   Year  Month  \\n\",\n       \"0  1974      1  \\n\",\n       \"1  1974      2  \\n\",\n       \"2  1974      3  \\n\",\n       \"3  1974      4  \\n\",\n       \"4  1974      5  \"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# make a new column for the year and month\\n\",\n    \"df['Year'] = pd.to_datetime(df['Date']).dt.year\\n\",\n    \"df['Month'] = pd.to_datetime(df['Date']).dt.month\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>Year</th>\\n\",\n       \"      <th>Month</th>\\n\",\n       \"      <th>Mean Temperature (C)</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1974-01-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1974-02-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>1974-03-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>1974-04-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>1974-05-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>-3.5</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"         Date  Year  Month  Mean Temperature (C)\\n\",\n       \"0  1974-01-01  1974      1                   NaN\\n\",\n       \"1  1974-02-01  1974      2                   NaN\\n\",\n       \"2  1974-03-01  1974      3                   NaN\\n\",\n       \"3  1974-04-01  1974      4                   NaN\\n\",\n       \"4  1974-05-01  1974      5                  -3.5\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# drop the columns that are not needed\\n\",\n    \"df = df[['Date', 'Year', 'Month', 'Mean Temperature (C)']]\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# write the df to a new csv file\\n\",\n    \"df.to_csv('data/PalmerStation_Monthly_Weather_Clean.csv', index=False)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \".venv\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.13.0\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n", "type": "text"}, {"name": "suntime.py", "content": "import math\nimport warnings\nfrom datetime import datetime, timedelta, time, timezone\n\n\n# CONSTANT\nTO_RAD = math.pi/180.0\n\n\nclass SunTimeException(Exception):\n\n    def __init__(self, message):\n        super(SunTimeException, self).__init__(message)\n\n\nclass Sun:\n    \"\"\"\n    Approximated calculation of sunrise and sunset datetimes. Adapted from:\n    https://stackoverflow.com/questions/19615350/calculate-sunrise-and-sunset-times-for-a-given-gps-coordinate-within-postgresql\n    \"\"\"\n    def __init__(self, lat, lon):\n        self._lat = lat\n        self._lon = lon\n\n        self.lngHour = self._lon / 15\n\n    def get_sunrise_time(self, at_date=datetime.now(), time_zone=timezone.utc):\n        \"\"\"\n        :param at_date: Reference date. datetime.now() if not provided.\n        :param time_zone: pytz object with .tzinfo() or None\n        :return: sunrise datetime.\n        :raises: SunTimeException when there is no sunrise and sunset on given location and date.\n        \"\"\"\n        time_delta = self.get_sun_timedelta(at_date, time_zone=time_zone, is_rise_time=True)\n        if time_delta is None:\n            raise SunTimeException('The sun never rises on this location (on the specified date)')\n        else:\n            return datetime.combine(at_date, time(tzinfo=time_zone)) + time_delta\n\n    def get_sunset_time(self, at_date=datetime.now(), time_zone=timezone.utc):\n        \"\"\"\n        Calculate the sunset time for given date.\n        :param at_date: Reference date. datetime.now() if not provided.\n        :param time_zone: pytz object with .tzinfo() or None\n        :return: sunset datetime.\n        :raises: SunTimeException when there is no sunrise and sunset on given location and date.\n        \"\"\"\n        time_delta = self.get_sun_timedelta(at_date, time_zone=time_zone, is_rise_time=False)\n        if time_delta is None:\n            raise SunTimeException('The sun never rises on this location (on the specified date)')\n        else:\n            return datetime.combine(at_date, time(tzinfo=time_zone)) + time_delta\n\n    def get_local_sunrise_time(self, at_date=datetime.now(), time_zone=None):\n        \"\"\" DEPRECATED: Use get_sunrise_time() instead. \"\"\"\n        warnings.warn(\"get_local_sunrise_time is deprecated and will be removed in future versions.\"\n                      \"Use get_sunrise_time with proper time zone\", DeprecationWarning)\n\n        return self.get_sunrise_time(at_date, time_zone)\n\n    def get_local_sunset_time(self, at_date=datetime.now(), time_zone=None):\n        \"\"\" DEPRECATED: Use get_sunset_time() instead. \"\"\"\n        warnings.warn(\"get_local_sunset_time is deprecated and will be removed in future versions.\"\n                      \"Use get_sunset_time with proper time zone.\", DeprecationWarning)\n        return self.get_sunset_time(at_date, time_zone)\n\n    def get_sun_timedelta(self, at_date, time_zone, is_rise_time=True, zenith=90.8):\n        \"\"\"\n        Calculate sunrise or sunset date.\n        :param at_date: Reference date\n        :param time_zone: pytz object with .tzinfo() or None\n        :param is_rise_time: True if you want to calculate sunrise time.\n        :param zenith: Sun reference zenith\n        :return: timedelta showing hour, minute, and second of sunrise or sunset\n        \"\"\"\n\n        # If not set get local timezone from datetime\n        if time_zone is None:\n            time_zone = datetime.now().tzinfo\n\n        # 1. first get the day of the year\n        N = at_date.timetuple().tm_yday\n\n        # 2. convert the longitude to hour value and calculate an approximate time\n        if is_rise_time:\n            t = N + ((6 - self.lngHour) / 24)\n        else:   # sunset\n            t = N + ((18 - self.lngHour) / 24)\n\n        # 3a. calculate the Sun's mean anomaly\n        M = (0.9856 * t) - 3.289\n\n        # 3b. calculate the Sun's true longitude\n        L = M + (1.916 * math.sin(TO_RAD*M)) + (0.020 * math.sin(TO_RAD * 2 * M)) + 282.634\n        L = self._force_range(L, 360)   # NOTE: L adjusted into the range [0,360)\n\n        # 4a. calculate the Sun's declination\n        sinDec = 0.39782 * math.sin(TO_RAD*L)\n        cosDec = math.cos(math.asin(sinDec))\n\n        # 4b. calculate the Sun's local hour angle\n        cosH = (math.cos(TO_RAD*zenith) - (sinDec * math.sin(TO_RAD*self._lat))) / (cosDec * math.cos(TO_RAD*self._lat))\n\n        if cosH > 1:\n            return None     # The sun never rises on this location (on the specified date)\n        if cosH < -1:\n            return None     # The sun never sets on this location (on the specified date)\n\n        # 4c. finish calculating H and convert into hours\n        if is_rise_time:\n            H = 360 - (1/TO_RAD) * math.acos(cosH)\n        else:   # setting\n            H = (1/TO_RAD) * math.acos(cosH)\n        H = H / 15\n\n        # 5a. calculate the Sun's right ascension\n        RA = (1/TO_RAD) * math.atan(0.91764 * math.tan(TO_RAD*L))\n        RA = self._force_range(RA, 360)     # NOTE: RA adjusted into the range [0,360)\n\n        # 5b. right ascension value needs to be in the same quadrant as L\n        Lquadrant = (math.floor(L/90)) * 90\n        RAquadrant = (math.floor(RA/90)) * 90\n        RA = RA + (Lquadrant - RAquadrant)\n\n        # 5c. right ascension value needs to be converted into hours\n        RA = RA / 15\n\n        # 6. calculate local mean time of rising/setting\n        T = H + RA - (0.06571 * t) - 6.622\n\n        # 7a. adjust back to UTC\n        UT = T - self.lngHour\n\n        if time_zone:\n            # 7b. adjust back to local time\n            UT += time_zone.utcoffset(at_date).total_seconds() / 3600\n\n        # 7c. rounding and impose range bounds\n        UT = round(UT, 2)\n        if is_rise_time:\n            UT = self._force_range(UT, 24)\n\n        # 8. return timedelta\n        return timedelta(hours=UT)\n\n    @staticmethod\n    def _force_range(v, max):\n        # force v to be >= 0 and < max\n        if v < 0:\n            return v + max\n        elif v >= max:\n            return v - max\n        return v\n", "type": "text"}]
