[{"name": "app.py", "content": "from shiny import reactive, render\nfrom shiny.express import ui, input\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\nimport openmeteo_requests\nimport requests_cache\nfrom retry_requests import retry\n\nUPDATE_INTERVAL_SECS: int = 3\n\n# --------------------------------------------\n# Initialize a REACTIVE VALUE with a common data structure\n# The reactive value is used to store state (information)\n# Used by all the display components that show this live data.\n# This reactive value is a wrapper around a DEQUE of readings\n# --------------------------------------------\n\nDEQUE_SIZE: int = 50\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# Load the historical data from data folder\nhistorical_data_path = \"data/PalmerStation_Monthly_Weather_Clean.csv\"\nhistorical_df = pd.read_csv(historical_data_path)\nhistorical_df['Date'] = pd.to_datetime(historical_df['Date'])\n\n# Collect the Live Data\n\n# Set update interval for live weather data\nWEATHER_UPDATE_INTERVAL_SECS: int = 900  # 15 minutes in seconds\n\n@reactive.effect\ndef update_weather():\n    # Invalidate this effect every WEATHER_UPDATE_INTERVAL_SECS\n    reactive.invalidate_later(WEATHER_UPDATE_INTERVAL_SECS)\n\n# Setup the Open-Meteo API client with cache and retry on error\ncache_session = requests_cache.CachedSession('.cache', expire_after = 3600)\nretry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)\nopenmeteo = openmeteo_requests.Client(session = retry_session)\n\n# Make sure all required weather variables are listed here\n# The order of variables in hourly or daily is important to assign them correctly below\nurl = \"https://api.open-meteo.com/v1/forecast\"\nparams = {\n    \"latitude\": -77.846,\n    \"longitude\": 166.676,\n    \"minutely_15\": \"temperature_2m\",\n    \"current\": \"temperature_2m\",\n    \"timezone\": \"GMT\",\n    \"past_minutely_15\": 24,\n    \"forecast_days\": 1\n}\nresponses = openmeteo.weather_api(url, params=params)\n\n# Process first location. Add a for-loop for multiple locations or weather models\nresponse = responses[0]\n\n\n# Current values. The order of variables needs to be the same as requested.\ncurrent = response.Current()\ncurrent_temperature_2m = current.Variables(0).Value()\n\n# Process minutely_15 data. The order of variables needs to be the same as requested.\nminutely_15 = response.Minutely15()\nminutely_15_temperature_2m = minutely_15.Variables(0).ValuesAsNumpy()\n\nminutely_15_data = {\"date\": pd.date_range(\n\tstart = pd.to_datetime(minutely_15.Time(), unit = \"s\", utc = True),\n\tend = pd.to_datetime(minutely_15.TimeEnd(), unit = \"s\", utc = True),\n\tfreq = pd.Timedelta(seconds = minutely_15.Interval()),\n\tinclusive = \"left\"\n)}\nminutely_15_data[\"temperature_2m\"] = minutely_15_temperature_2m\n\nminutely_15_dataframe = pd.DataFrame(data = minutely_15_data)\n\n\n# Define the reactive calculation\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic\n    temp = round(random.uniform(-18, 1), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\":temp, \"timestamp\":timestamp}\n\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # For Display: Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n\n    # For Display: Get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry\n\n    # Return a tuple with everything we need\n    # Every time we call this function, we'll get all these values\n    return deque_snapshot, df, latest_dictionary_entry\n\n@reactive.calc()\ndef filtered_historical_df():\n    # Get the selected time interval from the input\n    selected_interval = input.time()\n    # Parse the current date to get year and month\n    current_date = datetime.now()\n    current_year = current_date.year\n    current_month = current_date.month\n\n    # Filter the historical_df based on the selected interval\n    if selected_interval == \"1 Year\":\n        filtered_df = historical_df[\n            ((historical_df[\"Year\"] == current_year - 1) & (historical_df[\"Month\"] >= current_month)) |\n            (historical_df[\"Year\"] == current_year)\n        ]\n    elif selected_interval == \"5 years\":\n        filtered_df = historical_df[historical_df[\"Year\"] >= current_year - 5]\n    elif selected_interval == \"25 Years\":\n        filtered_df = historical_df[historical_df[\"Year\"] >= current_year - 25]\n    elif selected_interval == \"50 Years\":\n        filtered_df = historical_df[historical_df[\"Year\"] >= current_year - 50]\n    else:\n        filtered_df = historical_df\n\n    return filtered_df\n\n\n\n\n# Define the Shiny UI Page layout\n# Call the ui.page_opts() function\n# Set title to a string in quotes that will appear at the top\n# Set fillable to True to use the whole page width for the UI\nui.page_opts(title=\"Palmer Station Antarctica Temperatures\", fillable=True)\n\n# Sidebar is typically used for user interaction/information\n# Note the with statement to create the sidebar followed by a colon\n# Everything in the sidebar is indented consistently\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\"),\n    ui.p(\"A demonstration of real-time temperature readings in Antarctica.\", class_=\"text-center\",),\n    ui.input_select(\"source\", \"Live Data Source\", [\"OpenMeteo API\", \"Random\"], selected=\"OpenMeteo API\"),\n    ui.input_select(\"data\", \"Data Table Source\", [\"OpenMeteo API\", \"Random\", \"Historical Data\"], selected=\"OpenMeteo API\"),\n    ui.input_select(\"time\", \"Historical Time Interval\", [\"1 Year\", \"5 years\", \"25 Years\", \"50 Years\"], selected=\"25 Years\"),\n    ui.hr(),\n    ui.h6(\"Links:\"),\n    ui.a(\"GitHub Source\", href=\"https://github.com/drpafowler/cintel-05-cintel/tree/main\", target=\"_blank\",),\n    ui.a(\"GitHub App\", href=\"https://drpafowler.github.io/cintel-05-cintel/\", target=\"_blank\")\n    ui.a(\"OpenMeteo API\", href=\"https://open-meteo.com/\", target=\"_blank\")\n    ui.a(\"Palmer Station Historical Data\", href=\"https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-pal&identifier=189\", target=\"_blank\",)\n\n# In Shiny Express, everything not in the sidebar is in the main panel\n\nwith ui.layout_columns():\n    with ui.value_box(showcase=icon_svg(\"temperature-low\"), theme=\"bg-gradient-blue-purple\"):\n\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            if input.source() == \"OpenMeteo API\":\n                return f\"{current_temperature_2m:.1f} C\"\n\n            else:\n                deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n                return f\"{latest_dictionary_entry['temp']} C\"\n\n        @render.text\n        def display_temp_status():\n            \"\"\"Get the latest reading and return a status string\"\"\"\n            if input.source() == \"OpenMeteo API\":\n                temp = current_temperature_2m\n            else:\n                deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n                temp = latest_dictionary_entry['temp']\n            \n            if temp > 0:\n                return \"Warmer than Usual\"\n            elif temp > -15:\n                return \"Average Temperatures\"\n            else:\n                return \"Colder than Usual\"\n\n  \n\n    with ui.value_box(showcase=icon_svg(\"clock\"), theme=\"bg-gradient-blue-purple\"):\n\n        \"Current Date and Time at Palmer Station\"\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string in Palmer Station time (UTC-3)\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            # Convert the timestamp string to datetime\n            utc_time = datetime.strptime(latest_dictionary_entry['timestamp'], \"%Y-%m-%d %H:%M:%S\")\n            # Adjust for Palmer Station timezone (UTC-3)\n            palmer_time = utc_time.replace(hour=(utc_time.hour - 3) % 24)\n            return palmer_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Data Table\")\n\n    @render.data_frame\n    def display_df():\n        \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n        if input.data() == \"OpenMeteo API\":\n            return render.DataGrid(minutely_15_dataframe, width=\"100%\")\n        elif input.data() == \"Random\":\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            pd.set_option('display.width', None)\n            return render.DataGrid(df, width=\"100%\")\n        else:  # Historical Data\n            return render.DataGrid(filtered_historical_df(), width=\"100%\")\n\nwith ui.card():\n    ui.card_header(\"Live Data\")\n\n    @render_plotly\n    def display_plot():\n        if input.source() == \"OpenMeteo API\":\n            # Create scatter plot for OpenMeteo data\n            fig = px.scatter(minutely_15_dataframe,\n                x=\"date\", \n                y=\"temperature_2m\",\n                title=\"OpenMeteo Temperature Readings\",\n                labels={\"temperature_2m\": \"Temperature (\u00b0C)\", \"date\": \"Time\"},\n                color_discrete_sequence=[\"blue\"])\n            return fig\n        else:\n            # Fetch from the reactive calc function for random data\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n            # Ensure the DataFrame is not empty before plotting\n            if not df.empty:\n                # Convert the 'timestamp' column to datetime for better plotting\n                df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n                # Create scatter plot for readings\n                fig = px.scatter(df,\n                    x=\"timestamp\",\n                    y=\"temp\",\n                    title=\"Temperature Readings with Regression Line\",\n                    labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n                    color_discrete_sequence=[\"blue\"])\n                \n                # Linear regression\n                sequence = range(len(df))\n                x_vals = list(sequence)\n                y_vals = df[\"temp\"]\n\n                slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n                df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n                # Add the regression line to the figure\n                fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line')\n\n                # Update layout\n                fig.update_layout(xaxis_title=\"Time\", yaxis_title=\"Temperature (\u00b0C)\")\n                return fig\n\n            return px.scatter()  # Return empty plot if df is empty\n\nwith ui.card():\n    ui.card_header(\"Historical Data\")   \n\n    @render_plotly\n    def display_historical_plot():\n        # Fetch the filtered historical data\n        filtered_df = filtered_historical_df()\n        fig = px.scatter(filtered_df,\n            x=\"Date\",\n            y=\"Mean Temperature (C)\",\n            title=\"Historical Temperature Readings\",\n            labels={\"Temperature\": \"Temperature (\u00b0C)\", \"Date\": \"Time\"},\n            color_discrete_sequence=[\"blue\"] )\n\n        # Calculate and add a 12-month running average (since we have monthly data)\n        filtered_df['Running_Avg'] = filtered_df['Mean Temperature (C)'].rolling(window=12, center=True).mean()\n\n        # Add the running average as a red line\n        fig.add_scatter(\n            x=filtered_df[\"Date\"], \n            y=filtered_df[\"Running_Avg\"], \n            mode='lines', \n            line=dict(color='red', width=2), \n            name='12-Month Running Average'\n        )\n\n        return fig\n    \n\n\n", "type": "text"}, {"name": "cleandata.ipynb", "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let's clean up the data\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>Mean Temperature (C)</th>\\n\",\n       \"      <th>Temperature Count</th>\\n\",\n       \"      <th>Mean Pressure (mbar)</th>\\n\",\n       \"      <th>Pressure Count</th>\\n\",\n       \"      <th>Mean Precipitation (mm)</th>\\n\",\n       \"      <th>Sum Precipitation (mm)</th>\\n\",\n       \"      <th>Precipitation Count</th>\\n\",\n       \"      <th>Mean Sea Surface Temperature (C)</th>\\n\",\n       \"      <th>Sea Surface Temperature Count</th>\\n\",\n       \"      <th>Mean Windspeed (knots)</th>\\n\",\n       \"      <th>Windspeed Count</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1974-01-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1974-02-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>1974-03-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>1974-04-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>1974-05-01</td>\\n\",\n       \"      <td>-3.5</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"         Date  Mean Temperature (C)  Temperature Count  Mean Pressure (mbar)  \\\\\\n\",\n       \"0  1974-01-01                   NaN                NaN                   NaN   \\n\",\n       \"1  1974-02-01                   NaN                NaN                   NaN   \\n\",\n       \"2  1974-03-01                   NaN                NaN                   NaN   \\n\",\n       \"3  1974-04-01                   NaN                NaN                   NaN   \\n\",\n       \"4  1974-05-01                  -3.5                NaN                   NaN   \\n\",\n       \"\\n\",\n       \"   Pressure Count  Mean Precipitation (mm)  Sum Precipitation (mm)  \\\\\\n\",\n       \"0             NaN                      NaN                     NaN   \\n\",\n       \"1             NaN                      NaN                     NaN   \\n\",\n       \"2             NaN                      NaN                     NaN   \\n\",\n       \"3             NaN                      NaN                     NaN   \\n\",\n       \"4             NaN                      NaN                     NaN   \\n\",\n       \"\\n\",\n       \"   Precipitation Count  Mean Sea Surface Temperature (C)  \\\\\\n\",\n       \"0                  NaN                               NaN   \\n\",\n       \"1                  NaN                               NaN   \\n\",\n       \"2                  NaN                               NaN   \\n\",\n       \"3                  NaN                               NaN   \\n\",\n       \"4                  NaN                               NaN   \\n\",\n       \"\\n\",\n       \"   Sea Surface Temperature Count  Mean Windspeed (knots)  Windspeed Count  \\n\",\n       \"0                            NaN                     NaN              NaN  \\n\",\n       \"1                            NaN                     NaN              NaN  \\n\",\n       \"2                            NaN                     NaN              NaN  \\n\",\n       \"3                            NaN                     NaN              NaN  \\n\",\n       \"4                            NaN                     NaN              NaN  \"\n      ]\n     },\n     \"execution_count\": 1,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# import the pandas library and read the data from the csv file\\n\",\n    \"import pandas as pd\\n\",\n    \"df = pd.read_csv('data/PalmerStation_Monthly_Weather.csv')\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>Mean Temperature (C)</th>\\n\",\n       \"      <th>Temperature Count</th>\\n\",\n       \"      <th>Mean Pressure (mbar)</th>\\n\",\n       \"      <th>Pressure Count</th>\\n\",\n       \"      <th>Mean Precipitation (mm)</th>\\n\",\n       \"      <th>Sum Precipitation (mm)</th>\\n\",\n       \"      <th>Precipitation Count</th>\\n\",\n       \"      <th>Mean Sea Surface Temperature (C)</th>\\n\",\n       \"      <th>Sea Surface Temperature Count</th>\\n\",\n       \"      <th>Mean Windspeed (knots)</th>\\n\",\n       \"      <th>Windspeed Count</th>\\n\",\n       \"      <th>Year</th>\\n\",\n       \"      <th>Month</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1974-01-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1974-02-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>1974-03-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>1974-04-01</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>1974-05-01</td>\\n\",\n       \"      <td>-3.5</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"         Date  Mean Temperature (C)  Temperature Count  Mean Pressure (mbar)  \\\\\\n\",\n       \"0  1974-01-01                   NaN                NaN                   NaN   \\n\",\n       \"1  1974-02-01                   NaN                NaN                   NaN   \\n\",\n       \"2  1974-03-01                   NaN                NaN                   NaN   \\n\",\n       \"3  1974-04-01                   NaN                NaN                   NaN   \\n\",\n       \"4  1974-05-01                  -3.5                NaN                   NaN   \\n\",\n       \"\\n\",\n       \"   Pressure Count  Mean Precipitation (mm)  Sum Precipitation (mm)  \\\\\\n\",\n       \"0             NaN                      NaN                     NaN   \\n\",\n       \"1             NaN                      NaN                     NaN   \\n\",\n       \"2             NaN                      NaN                     NaN   \\n\",\n       \"3             NaN                      NaN                     NaN   \\n\",\n       \"4             NaN                      NaN                     NaN   \\n\",\n       \"\\n\",\n       \"   Precipitation Count  Mean Sea Surface Temperature (C)  \\\\\\n\",\n       \"0                  NaN                               NaN   \\n\",\n       \"1                  NaN                               NaN   \\n\",\n       \"2                  NaN                               NaN   \\n\",\n       \"3                  NaN                               NaN   \\n\",\n       \"4                  NaN                               NaN   \\n\",\n       \"\\n\",\n       \"   Sea Surface Temperature Count  Mean Windspeed (knots)  Windspeed Count  \\\\\\n\",\n       \"0                            NaN                     NaN              NaN   \\n\",\n       \"1                            NaN                     NaN              NaN   \\n\",\n       \"2                            NaN                     NaN              NaN   \\n\",\n       \"3                            NaN                     NaN              NaN   \\n\",\n       \"4                            NaN                     NaN              NaN   \\n\",\n       \"\\n\",\n       \"   Year  Month  \\n\",\n       \"0  1974      1  \\n\",\n       \"1  1974      2  \\n\",\n       \"2  1974      3  \\n\",\n       \"3  1974      4  \\n\",\n       \"4  1974      5  \"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# make a new column for the year and month\\n\",\n    \"df['Year'] = pd.to_datetime(df['Date']).dt.year\\n\",\n    \"df['Month'] = pd.to_datetime(df['Date']).dt.month\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Date</th>\\n\",\n       \"      <th>Year</th>\\n\",\n       \"      <th>Month</th>\\n\",\n       \"      <th>Mean Temperature (C)</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1974-01-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1974-02-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>1974-03-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>1974-04-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>1974-05-01</td>\\n\",\n       \"      <td>1974</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>-3.5</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"         Date  Year  Month  Mean Temperature (C)\\n\",\n       \"0  1974-01-01  1974      1                   NaN\\n\",\n       \"1  1974-02-01  1974      2                   NaN\\n\",\n       \"2  1974-03-01  1974      3                   NaN\\n\",\n       \"3  1974-04-01  1974      4                   NaN\\n\",\n       \"4  1974-05-01  1974      5                  -3.5\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# drop the columns that are not needed\\n\",\n    \"df = df[['Date', 'Year', 'Month', 'Mean Temperature (C)']]\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# write the df to a new csv file\\n\",\n    \"df.to_csv('data/PalmerStation_Monthly_Weather_Clean.csv', index=False)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \".venv\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.13.0\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n", "type": "text"}]